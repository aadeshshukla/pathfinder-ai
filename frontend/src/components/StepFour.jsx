import React, { useState } from 'react';
import jsPDF from 'jspdf';
import './StepFour.css';

const StepFour = ({ roadmapData, isLoading, error, onPrevious, formData }) => {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const generatePDF = async () => {
    if (!roadmapData) return;
    
    setIsGeneratingPDF(true);
    
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const margin = 20;
      let yPosition = margin;
      
      // Helper function to add text with word wrapping
      const addText = (text, fontSize = 12, isBold = false) => {
        doc.setFontSize(fontSize);
        doc.setFont('helvetica', isBold ? 'bold' : 'normal');
        
        const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
        lines.forEach(line => {
          if (yPosition > 270) {
            doc.addPage();
            yPosition = margin;
          }
          doc.text(line, margin, yPosition);
          yPosition += fontSize * 0.5;
        });
        yPosition += 5;
      };

      // Title
      addText('üéØ Your Personalized Learning Roadmap', 20, true);
      yPosition += 10;

      // Goal
      if (formData?.goal) {
        addText(`Goal: ${formData.goal}`, 14, true);
      }

      // Timeline info
      if (roadmapData.timeline?.totalDays) {
        addText(`Total Duration: ${roadmapData.timeline.totalDays} days`, 12);
      }
      
      if (roadmapData.milestones?.length) {
        addText(`Milestones: ${roadmapData.milestones.length}`, 12);
      }
      
      yPosition += 10;

      // Milestones
      if (roadmapData.milestones && roadmapData.milestones.length > 0) {
        addText('üìã MILESTONES', 16, true);
        
        roadmapData.milestones.forEach((milestone, index) => {
          addText(`${index + 1}. ${milestone.title}`, 14, true);
          addText(`Duration: ${milestone.estimatedDays} days`, 11);
          addText(milestone.description, 11);
          
          if (milestone.tasks && milestone.tasks.length > 0) {
            addText('Key Tasks:', 12, true);
            milestone.tasks.forEach(task => {
              addText(`‚Ä¢ ${task}`, 11);
            });
          }
          yPosition += 10;
        });
      }

      // Resources
      if (roadmapData.resources && roadmapData.resources.length > 0) {
        addText('üìö RECOMMENDED RESOURCES', 16, true);
        
        roadmapData.resources.forEach(resource => {
          addText(`‚Ä¢ ${resource.name} (${resource.type})`, 11, true);
          addText(`  ${resource.link}`, 10);
        });
        yPosition += 10;
      }

      // Tips
      if (roadmapData.tips && roadmapData.tips.length > 0) {
        addText('üí° TIPS', 16, true);
        
        roadmapData.tips.forEach(tip => {
          addText(`‚Ä¢ ${tip}`, 11);
        });
      }

      // Footer
      const now = new Date();
      const timestamp = now.toLocaleDateString();
      doc.setFontSize(8);
      doc.text(`Generated by Pathfinder AI on ${timestamp}`, margin, 285);

      // Generate filename
      const goalSlug = formData?.goal ? 
        formData.goal.toLowerCase().replace(/[^a-z0-9]/g, '-').substring(0, 30) : 
        'roadmap';
      const filename = `${goalSlug}-${now.getFullYear()}-${(now.getMonth()+1).toString().padStart(2,'0')}-${now.getDate().toString().padStart(2,'0')}.pdf`;

      // Save the PDF
      doc.save(filename);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  // ... existing code for loading, error, and empty states ...

  if (!roadmapData) {
    return (
      <div className="step-container compact">
        <div className="empty-state">
          <h2>üì≠ No roadmap to display</h2>
          <button onClick={onPrevious} className="btn btn-primary">
            ‚Üê Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="roadmap-view">
      {/* ... existing roadmap display code ... */}
      
      <div className="roadmap-actions">
        <button 
          onClick={generatePDF} 
          className="btn btn-secondary"
          disabled={isGeneratingPDF}
        >
          {isGeneratingPDF ? '‚è≥ Generating PDF...' : 'üìÑ Download PDF'}
        </button>
        <button onClick={onPrevious} className="btn btn-primary">
          üÜï Create New Roadmap
        </button>
      </div>
    </div>
  );
};

export default StepFour;






